generator client {
  provider = "prisma-client-js"
  url      = env("DATABASE_URL")
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  invoiceId    String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Invoice Invoice? @relation(fields: [invoiceId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  password String
  image    String?
  invoices Invoice[]
  accounts Account[]
  sessions Session[]
}

model Invoice {
  id                   String            @id @default(cuid())
  streetAddress        String?           @db.Text
  streetFrom           String?           @db.Text
  cityFrom             String?           @db.Text
  postalCodeFrom       String?           @db.Text
  countryFrom          String?           @db.Text
  clientNameTo         String?           @db.Text
  clientEmailTo        String?           @db.Text
  streetTo             String?           @db.Text
  cityTo               String?           @db.Text
  postalCodeTo         String?           @db.Text
  countryTo            String?           @db.Text
  invoiceDateTo        DateTime          @default(now())
  paymentTermsTo       String?           @db.Text
  projectDescriptionTo String?           @db.Text
  itemList             InvoiceItemList[]
  Account              Account[]
  Session              Session[]
  userId               String?

  User User? @relation(fields: [userId], references: [id])
}

model InvoiceItemList {
  id        String  @id @default(cuid())
  name      String?
  quantity  String?
  price     Float?
  total     Float?
  invoiceId String?

  Invoice Invoice? @relation(fields: [invoiceId], references: [id])
}
